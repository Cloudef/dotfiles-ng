#!/bin/bash
# Crawl danbooru for pictures
#

# USAGE
# -----
# danbooru (-v) (-r) (-s) [page] [tags] [limit]
#  -v: verbose output
#  -r: recrawl posts (updates json, updates location if needed)
#  -s: don't fork (sets FORK_LIMIT to 1)
#
# Following are only relevant when no -r is specified:
#  [page]: page number to crawl in danbooru
#  [tags]: tags/metatags for searching
#  [limit]: limit results per page

# -- Sun Apr 14 07:49:45 UTC 2013
# Artist information is now provided in Danbooru API!
# The caching code and crawling code for artist is now removed.
# You can remove ignore.db and artist.db.
#
# I also removed %pool formatting as it would just use pool ids not the name

# -- Fri Apr 12 18:36:21 UTC 2013
# Danbooru API changed!
# Still no artist information in post json...
# This script is not compatible with old danbooru storage format anymore.
#
# More filtering options also provided.
# .meta and .tags files no longer exists, instead .json file is provided!
#
# Also jsawk dependency is dropped for jshon dependency.

# ABOUT
# -----
# Uses JSON API instead of crawling HTML.
# Much fool proof and allows more control.
# Also it won't bloat your directory with lots of images, that slows down various file browsers.

# Limit requests
# Why? See: http://danbooru.donmai.us/forum/show/72300
#
# If you are calling this script in for loop, you should call sleep each iteration.

# Local directory where to store the posts
LOCAL_STORE="/mnt/storage/pictures/danbooru"

# Directory structure for storing posts
# Following keys can be used:
#  %extension: file extension (.jpg, .png, ...)
#  %artist:    artist of the post
#  %rating:    rating of the post (safe, questionable, explicit)
#  %postid:    id of the post
#  %md5:       md5 of the post
#
# Example of default format:
# /danbooru/Rib_y(uhki)/safe/dd192a8639f36f3fa38e551d0f24d73c.jpg"
#
# Duplicate detection breaks, if you change this after crawling
#
# Use -v flag to doublecheck that your filepaths looks sane
# This script does no sanity checking to this
LOCAL_FORMAT="%artist/%rating/%md5.%extension"

# Filename expression
# Set characters which you want stripped from filename, eg, if you use fat32.
FILENAME_EXP='s/[][%\+\\\"\*;:\?\|<>,=]/_/g'

# Rating to download
# s = Only download safe posts
# q = Download questionable && safe posts
# e = Download explicit && questionable && safe posts
DANBOORU_RATING="e"

# Download only posts that are higher than this score
DANBOORU_SCORE=0

# Download pending posts?
DANBOORU_PENDING=0

# Download deleted posts?
DANBOORU_DELETED=0

# Download flagged posts?
DANBOORU_FLAGGED=0

# Download non rating locked posts?
DANBOORU_NON_RATING_LOCKED=1

# Download non status locked posts?
DANBOORU_NON_STATUS_LOCKED=1

# Download non note locked posts?
DANBOORU_NON_NOTE_LOCKED=1

# Download only parent posts
DANBOORU_ONLY_PARENT=0

# Download posts with no artist tag?
DANBOORU_NO_ARTIST=0

# Download only posts matching following dimensions
# Leave array blank to download everything
# ex. ("1680x1050" "800x600")
DANBOORU_LIMIT_DIMENSIONS=()

# Filter tags
# Posts which match one of these tags will not be downloaded
DANBOORU_TAG_FILTER=("yaoi" "tiger_&_bunny" "boys_love" "shounen-ai")

# Tag match
# Only posts which match one of these tags will be downloaded
DANBOORU_TAG_MATCH=()

# Filter pools
# Posts which match one of these pools will not be downloaded
# NOTE: This array takes pool ids!
DANBOORU_POOL_FILTER=()

# Pool match
# Only posts which match one of these pools will be downloaded
# NOTE: This array takes pool ids!
DANBOORU_POOL_MATCH=()

# Limit the number of sub processes for download
FORK_LIMIT=20

# Lock file
TMP_DIR="/tmp/danbooru"
LOCK_FILE="$TMP_DIR/lock"

# Danbooru API root
DANBOORU_ROOT="http://danbooru.donmai.us"

# Danbooru user && api key
source "/arch/passwd/libpasswd-sh"
DANBOORU_USER="$(_passwd_get_user "danbooru")"
DANBOORU_API_KEY="$(_passwd_get_pass "danbooru")"

# Curl agent
CURL_AGENT="Mozilla/4.73 [en] (X11; U; Linux 2.2.15 i686)"

# Depencies for this script
# Perl is used for url encoding tags
BIN_DEPS="curl jshon perl"

# Arguments
VERBOSE=0
RECRAWL=0

error()
{
   unlock
   echo "$@"
   exit 1
}

error_no_unlock()
{
   echo "$@"
   exit 1
}

check_deps()
{
   hash $BIN_DEPS
   [[ $? -eq 0 ]] || error_no_unlock "Depencies missing! Bail out..."
}

# Lock
lock()
{
   [[ -d "$TMP_DIR"     ]] || mkdir -p "$TMP_DIR"
   [[ ! -f "$LOCK_FILE" ]] || error_no_unlock "$(basename "$0") is already running!"
   touch "$LOCK_FILE"
}

# Unlock
unlock()
{
   [[ -f "$LOCK_FILE" ]] && rm "$LOCK_FILE"
   [[ -d "$TMP_DIR"   ]] && rm -r "$TMP_DIR"
}

# Signal handler
sigint()
{
   # Kill all sub processes
   test -z "`jobs -p`" || kill -9 `jobs -p` &> /dev/null

   # Unlock
   unlock

   echo "$(basename "$0"): SIGINT"
   exit 1
}

# Usage
usage()
{
   for i in $@; do
      [[ "$i" != "-h" ]] && [[ "$i" != "--help" ]] || error_no_unlock "$(basename "$0") (-v) (-r) (-s) [page] [tags] [limit]"
      [[ "$i" != "-v" ]]                           || VERBOSE=1
      [[ "$i" != "-r" ]]                           || RECRAWL=1
      [[ "$i" != "-s" ]]                           || FORK_LIMIT=1
   done
}

# Encode urls
# $1 = URL
urlencode()
{
   echo -n "$@" | perl -pe's/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg'
}

# $1 = API URL
# $2 = URL Arguments (optional)
get_json()
{
   [[ -n "$2" ]] &&
      curl -s --user-agent "$CURL_AGENT" "$DANBOORU_ROOT/$1.json?$2&login=$DANBOORU_USER&api_key=$DANBOORU_API_KEY"
   [[ -n "$2" ]] ||
      curl -s --user-agent "$CURL_AGENT" "$DANBOORU_ROOT/$1.json?login=$DANBOORU_USER&api_key=$DANBOORU_API_KEY"
}

# $1 = JSON rating
# Return readable rating
rating_str()
{
   [[ "$@" != "s" ]] || echo "safe"
   [[ "$@" != "q" ]] || echo "questionable"
   [[ "$@" != "e" ]] || echo "explicit"
}

# $1 = Post JSON
# Returns target from configured format
#  %extension: file extension (.jpg, .png, ...)
#  %artist:    artist of the post
#  %rating:    rating of the post (safe, questionable, explicit)
#  %postid:    id of the post
#  %md5:       md5 of the post
target_from_format()
{
   local JSON="$1"
   local ARTIST="$2"
   [[ -n "$JSON" ]] || return

   ID="$(echo "$JSON" | jshon -e "id" -u)"
   MD5="$(echo "$JSON" | jshon -e "md5" -u)"
   EXT="$(echo "$JSON" | jshon -e "file_ext" -u)"
   ARTISTS=($(echo "$JSON" | jshon -e "tag_string_artist" -u))
   ARTIST="${ARTISTS[0]}"
   RATING="$(echo "$JSON" | jshon -e "rating" -u)"
   RATING="$(rating_str "$RATING")"
   [[ -n "$RATING" ]] || return
   [[ -n "$ARTIST" ]] || ARTIST="noartist"

   TARGET="$(echo "$LOCAL_FORMAT" |\
      sed "s/%extension/$EXT/;s/%artist/$ARTIST/;s/%rating/$RATING/;s/%postid/$ID/;s/%md5/$MD5/")"
   TARGET=$(echo -n "$TARGET" | sed "$FILENAME_EXP") # Replace illegal characters.
   echo "$LOCAL_STORE/$TARGET"
}

# $1 = URL
# $2 = Touch date
# $3 = JSON
# $4 = Target
# Download picture
store_picture()
{
   local URL="$1"
   local DATE="$2"
   local JSON="$3"
   local TARGET="$4"

   # Temp target
   local BASE="$(basename "$URL")"
   local TEMP="$TMP_DIR/$BASE"

   # Download to $TEMP and move after finished to
   # destination to avoid partial downloads
   echo "==> [D] $URL"
   echo "     => $TARGET"
   curl -s -o "$TEMP" "$URL"

   # Download failed
   [[ -f "$TEMP" ]] || return

   # Check corrupt file
   MD5="$(md5sum "$TEMP")"
   MD5="${MD5%% *}"
   [[ "$MD5" == "${BASE%.*}" ]] || {
      echo "[!] Removing corrupt: $TEMP";
      rm "$TEMP"; return;
   }

   # mkdir
   mkdir -p "$(dirname $TARGET)"

   # Move to destination
   mv "$TEMP" "$TARGET"
   [[ -n "$DATE" ]] && touch -c -d "$DATE" "$TARGET"
   echo "$JSON" > "${TARGET%.*}.json"
}

# $1 = URL
# $2 = Danbooru URL
# $3 = Touch date
# $3 = JSON
# Stores the picture
check_picture()
{
   local URL="$1"
   local DURL="$2"
   local DATE="$3"
   local JSON="$4"

   [[ -n "$URL"  ]] || return
   [[ -n "$DURL" ]] || return
   [[ -n "$JSON" ]] || return

   # Check if file already exists
   TARGET="$(target_from_format "$JSON")"
   [[ $VERBOSE -eq 0 ]] || echo ":: TARGET: $TARGET"
   [[ -n "$TARGET" ]] || return
   if [[ -f "$TARGET" ]]; then
      echo "[!] exist [$(basename $TARGET)]: $DURL"
      [[ -f "${TARGET%.*}.json" ]] || echo "$JSON" > "${TARGET%.*}.json"
      return
   fi

   # Download picture to disk
   [[ $FORK_LIMIT -gt 1 ]] && store_picture "$URL" "$DATE" "$JSON" "$TARGET" &
   [[ $FORK_LIMIT -gt 1 ]] || store_picture "$URL" "$DATE" "$JSON" "$TARGET"
}

# Main
main()
{
   local RESULT=
   local LIMIT="${3-100}"
   local PAGE="${1-1}"
   local PTAGS="$(urlencode "$2")"
   local OK=0

   if [[ $VERBOSE -eq 0 ]]; then
      echo "[F] $DANBOORU_ROOT/posts.json?page=$PAGE&limit=$LIMIT&tags=$PTAGS"
      echo ""
   fi

   RESULT="$(get_json "posts" "page=$PAGE&limit=$LIMIT&tags=$PTAGS")"
   JSONCNT=$(echo "$RESULT" | jshon -l)

   for i in $(seq 0 $((JSONCNT-1))); do
      # Check if we are throttled
      if [[ "$RESULT" == "421 User Throttled" ]]; then
         echo "[!!] danbooru has throttled you"
         break
      fi

      # Fetch post JSON
      JSON="$(echo "$RESULT" | jshon -e $i 2>/dev/null)"
      [[ -n "$JSON" ]] || error "[!] No results.."

      # Parse stuff we need
      ID="$(echo "$JSON" | jshon -e "id" -u)"
      [[ -n "$ID" ]] || continue
      PENDING="$(echo "$JSON" | jshon -e "is_deleted" -u)"
      BANNED="$(echo "$JSON" | jshon -e "is_banned" -u)"
      DELETED="$(echo "$JSON" | jshon -e "is_deleted" -u)"
      FLAGGED="$(echo "$JSON" | jshon -e "is_flagged" -u)"
      NOTE_LOCKED="$(echo "$JSON" | jshon -e "is_note_locked" -u)"
      STATUS_LOCKED="$(echo "$JSON" | jshon -e "is_status_locked" -u)"
      RATING_LOCKED="$(echo "$JSON" | jshon -e "is_rating_locked" -u)"
      CREATED_AT="$(echo "$JSON" | jshon -e "created_at" -u)"
      RATING="$(echo "$JSON" | jshon -e "rating" -u)"
      SCORE="$(echo "$JSON" | jshon -e "score" -u)"
      WIDTH="$(echo "$JSON" | jshon -e "image_width" -u)"
      HEIGHT="$(echo "$JSON" | jshon -e "image_height" -u)"
      PARENT="$(echo "$JSON" | jshon -e "parent_id" -u)"
      TAGS="$(echo "$JSON" | jshon -e "tag_string" -u)"
      POOLS="$(echo "$JSON" | jshon -e "pool_string" -u)"
      MD5="$(echo "$JSON" | jshon -e "md5" -u)"
      EXT="$(echo "$JSON" | jshon -e "file_ext" -u)"
      URL="$DANBOORU_ROOT/data/$MD5.$EXT"
      DURL="$DANBOORU_ROOT/posts/$ID"
      ARTISTS=($(echo "$JSON" | jshon -e "tag_string_artist" -u))
      ARTIST="${ARTISTS[0]}"

      # Verbose output
      if [[ $VERBOSE -eq 1 ]]; then
         echo ""
         echo ":: ID: $IDS[$i]"
         echo ":: URL: $URL"
         echo ":: DURL: $DURL"
         echo ":: EXT: $EXT"
         echo ":: MD5: $MD5"
         [[ -n "$ARTIST" ]] && echo ":: ARTIST: $ARTIST"
         [[ -n "$POOLS" ]] && echo ":: POOLS: $POOLS"
      fi

      # Check artist
      OK=1
      [[ -n "$ARTIST" ]] || { [[ $DANBOORU_NO_ARTIST -eq 0 ]] && OK=0; }

      if [[ $OK -eq 0 ]]; then
         echo "[!] no artist: $DURL"
         continue
      fi

      # Check parent
      OK=1
      [[ "$PARENT" == "null" ]] || { [[ $DANBOORU_ONLY_PARENT -eq 1 ]] && OK=0; }

      if [[ $OK -eq 0 ]]; then
         echo "[!] block parent [$PARENT]: $DURL"
         continue
      fi

      # Check score
      OK=1
      [[ $SCORE -ge $DANBOORU_SCORE ]] || OK=0

      if [[ $OK -eq 0 ]]; then
         echo "[!] block score [$SCORE]: $DURL"
         continue
      fi

      # Check rating
      OK=1
      [[ "$RATING" == "e" ]] && { [[ "$DANBOORU_RATING" == "e" ]] || OK=0; }
      [[ "$RATING" == "q" ]] && { [[ "$DANBOORU_RATING" == "q" ]] || [[ "$DANBOORU_RATING" == "e" ]] || OK=0; }
      [[ "$RATING" == "s" ]] && OK=1

      if [[ $OK -eq 0 ]]; then
         echo "[!] block rating [$RATING]: $DURL"
         continue
      fi

      # Check status
      OK=1; STATUS="OK"
      [[ "$BANNED"  == "true" ]] && { OK=0; STATUS="banned"; }
      [[ "$PENDING" == "true" ]] && { [[ $DANBOORU_PENDING -eq 1 ]] || { OK=0; STATUS="pending"; } }
      [[ "$FLAGGED" == "true" ]] && { [[ $DANBOORU_FLAGGED -eq 1 ]] || { OK=0; STATUS="flagged"; } }
      [[ "$DELETED" == "true" ]] && { [[ $DANBOORU_DELETED -eq 1 ]] || { OK=0; STATUS="deleted"; } }
      [[ "$NOTE_LOCKED"   != "true" ]] && { [[ $DANBOORU_NON_NOTE_LOCKED -eq 1 ]]   || { OK=0; STATUS="not note locked"; } }
      [[ "$STATUS_LOCKED" != "true" ]] && { [[ $DANBOORU_NON_STATUS_LOCKED -eq 1 ]] || { OK=0; STATUS="not status locked"; } }
      [[ "$RATING_LOCKED" != "true" ]] && { [[ $DANBOORU_NON_RATING_LOCKED -eq 1 ]] || { OK=0; STATUS="not rating locked"; } }

      if [[ $OK -eq 0 ]]; then
         echo "[!] block status [$STATUS]: $DURL"
         continue
      fi

      # Check pool
      OK=1; BPOOL=""
      for POOL in "${POOLS[@]}"; do
         for EPOOL in "${DANBOORU_POOL_FILTER[@]}"; do
            [[ "pool:$EPOOL" != "$POOL" ]] && continue
            OK=0; BPOOL="$EPOOL"
            break
         done
         [[ $OK -eq 0 ]] && break
      done

      if [[ $OK -eq 0 ]]; then
         echo "[!] block pool [$BPOOL]: $DURL"
         continue
      fi

      OK=1;
      for POOL in "${POOLS[@]}"; do
         FOUND=0
         for EPOOL in "${DANBOORU_POOL_MATCH[@]}"; do
            [[ "pool:$EPOOL" != "$POOL" ]] && { OK=0; continue; }
            OK=1; FOUND=1
            break
         done
         [[ $FOUND -eq 1 ]] && break
      done

      if [[ $OK -eq 0 ]]; then
         echo "[!] no pool matched: $DURL"
         continue
      fi

      # Check tags
      OK=1; BTAG=""
      for ETAG in "${DANBOORU_TAG_FILTER[@]}"; do
         echo "$TAGS" | grep -Fw "$ETAG" &> /dev/null
         [[ $? -eq 1 ]] && continue
         OK=0; BTAG="$ETAG"
         break
      done

      if [[ $OK -eq 0 ]]; then
         echo "[!] block tag [$BTAG]: $DURL"
         continue
      fi

      OK=1
      for ETAG in "${DANBOORU_TAG_MATCH[@]}"; do
         echo "$TAGS" | grep -Fw "$ETAG" &> /dev/null
         [[ $? -eq 1 ]] && { OK=0; continue; }
         OK=1; break
      done

      if [[ $OK -eq 0 ]]; then
         echo "[!] no tag matched: $DURL"
         continue
      fi

      # Check resolution
      OK=1
      RES="${WIDTH}x${HEIGHT}"
      for ERES in "${DANBOORU_LIMIT_DIMENSIONS[@]}"; do
         [[ "$ERES" != "$RES" ]] && { OK=0; continue; }
         OK=1; break
      done

      if [[ $OK -eq 0 ]]; then
         echo "[!] block resolution [$RES]: $DURL"
         continue
      fi

      # Check picture
      check_picture "$URL" "$DURL" "$CREATED_AT" "$JSON"

      # Wait for forks
      while [[ $(jobs -p | wc -l) -gt $FORK_LIMIT ]]; do
         [[ $VERBOSE -eq 1 ]] && echo "[I] fork limit hit, waiting: ($(jobs -p | wc -l))"
         sleep 1
      done
   done

   # Wait for subprocesses
   [[ $VERBOSE -eq 1 ]] && [[ $i -gt 1 ]] && echo ""
   while [[ $(jobs -p | wc -l) -gt 1 ]]; do
      [[ $VERBOSE -eq 1 ]] && echo "[I] waiting for jobs ($(jobs -p | wc -l))"
      sleep 1
   done
}

# $1 = Path to json file
# Recrawl image using the data from JSON
recrawl_picture()
{
   local JSONF="$1"
   local JSON=

   # Find and remove bad posts
   ID="$(jshon -F "$JSONF" -e "id" -u)"
   if [[ ! -n "$ID" ]]; then
      echo ""
      echo "[!!] bad json file: $JSONF"
      rm "${JSONF%.*}."*
      return
   fi

   # Store stuff from old json
   OEXT="$(jshon -F "$JSONF" -e "file_ext" -u)"
   DURL="$DANBOORU_ROOT/posts/$ID"
   JSON="$(get_json "posts/$ID")"
   [[ -n "$JSON" ]] || return

   # Check if we are throttled
   if [[ "$JSON" == "421 User Throttled" ]]; then
      echo "[!!] danbooru has throttled you"
      return
   fi

   # Data we might like to recrawl
   ID="$(echo "$JSON" | jshon -e "id" -u)"

   # Failed to get ID
   # Fetch failed, or user throttled
   [[ -n "$ID" ]] || return

   CREATED_AT="$(echo "$JSON" | jshon -e "created_at" -u)"
   RATING="$(echo "$JSON" | jshon -e "rating" -u)"
   POOL="$(echo "$JSON" | jshon -e "pool_string" -u)"
   MD5="$(echo "$JSON" | jshon -e "md5" -u)"
   EXT="$(echo "$JSON" | jshon -e "file_ext" -u)"
   URL="$DANBOORU_ROOT/data/$MD5.$EXT"
   ARTISTS=($(echo "$JSON" | jshon -e "tag_string_artist" -u))
   ARTIST="${ARTISTS[0]}"

   # Get target
   OTARGET="${JSONF%.*}.$OEXT"
   TARGET="$(target_from_format "$JSON")"
   OMD5="$(md5sum "$OTARGET")"
   OMD5="${OMD5%% *}"

   # Verbose output
   if [[ $VERBOSE -eq 1 ]]; then
      echo ""
      echo ":: ID: $ID"
      echo ":: URL: $URL"
      echo ":: DURL: $DURL"
      echo ":: JSON: $JSONF"
      echo ":: EXT: $EXT"
      echo ":: MD5: $MD5"
      [[ -n "$ARTIST" ]] && echo ":: ARTIST: $ARTIST"
      [[ -n "$POOL" ]] && echo ":: POOL: $POOL"
      echo ":: TARGET: $TARGET"
   fi

   # Update the json file
   echo "$JSON" > "$JSONF"

   # Handle conflicts!
   if [[ "$OTARGET" != "$TARGET" ]] && [[ -f "$TARGET" ]]; then
      # Target already exists?
      echo "[!] target exists: $TARGET"
      rm "$OTARGET"
      rm "${OTARGET%.*}.json"
   elif [[ "$OMD5" != "$MD5" ]]; then
      # MD5 differs
      echo "[!] md5 differs: $DURL"
      store_picture "$URL" "$CREATED_AT" "$JSON" "$TARGET"
      if [[ -f "$TARGET" ]] && [[ "$TARGET" != "$OTARGET" ]]; then
         rm "$OTARGET"
         rm "${OTARGET%.*}.json"
      fi
   elif [[ "$OTARGET" != "$TARGET" ]]; then
      # Target differs
      echo "==> [M] $OTARGET"
      echo "     => $TARGET"
      mkdir -p "$(dirname $TARGET)"
      mv "$OTARGET" "$TARGET"
      mv "${OTARGET%.*}.json" "${TARGET%.*}.json"
      [[ -f "$TARGET" ]] && [[ -n "$CREATED_AT" ]] && touch -c -d "$CREATED_AT" "$TARGET"
   else
      # Update created at
      [[ -f "$TARGET" ]] && [[ -n "$CREATED_AT" ]] && touch -c -d "$CREATED_AT" "$TARGET"
   fi
}

# Recrawl images (updates .json and updates location if needed)
recrawl()
{
   echo "[I] recrawling from: $LOCAL_STORE"

   # Filter recrawling to pattern
   PATTERN="*"
   [[ -n "$@" ]] && PATTERN="*$@*"

   # Recrawl local posts
   find "$LOCAL_STORE" -path "$PATTERN" -name "*.json" | while read i; do
      [[ $VERBOSE -eq 0 ]] && echo "[C] $i"
      [[ $FORK_LIMIT -gt 1 ]] && { (recrawl_picture "$i" &); sleep 1; } # Sleep, so we don't hammer servers
      [[ $FORK_LIMIT -gt 1 ]] || recrawl_picture "$i"
      while [[ $(jobs -p | wc -l) -gt $FORK_LIMIT ]]; do
         [[ $VERBOSE -eq 1 ]] && echo "[I] fork limit hit, waiting: ($(jobs -p | wc -l))"
         sleep 1
      done
   done

   # Wait for subprocesses
   [[ $VERBOSE -eq 1 ]] && [[ $i -gt 1 ]] && echo ""
   while [[ $(jobs -p | wc -l) -gt 1 ]]; do
      [[ $VERBOSE -eq 1 ]] && echo "[I] waiting for jobs ($(jobs -p | wc -l))"
      sleep 1
   done

   # Remove all empty directories
   echo "[I] removing all empty directories"
   find "$LOCAL_STORE" -path "$PATTERN" -type d -empty -delete;
}

# Init
check_deps
usage $@

# Get rid of the recrawl argument
[[ $RECRAWL -eq 0 ]] || shift 1

# Get rid of the verbose argument
[[ $VERBOSE -eq 0 ]] || shift 1

# Create lock file
lock

# Trap SIGINT
trap sigint SIGINT

# Perform action
[[ $RECRAWL -eq 0 ]] && main $@
[[ $RECRAWL -eq 1 ]] && recrawl $@

# Unlock lock file
unlock
