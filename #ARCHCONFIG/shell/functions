#!/bin/bash
# Systemwide shell functions
#

#########################
## Colorized man pages ##
#########################
man() {
   env \
      LESS_TERMCAP_mb=$(printf "\e[1;31m") \
      LESS_TERMCAP_md=$(printf "\e[1;31m") \
      LESS_TERMCAP_me=$(printf "\e[0m") \
      LESS_TERMCAP_se=$(printf "\e[0m") \
      LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
      LESS_TERMCAP_ue=$(printf "\e[0m") \
      LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}

#####################################
## Take screenshot of main monitor ##
#####################################
shot() {
   local mon=$@
   local file="$HOME/shot-$(date +'%H:%M-%d-%m-%Y').png"
   [[ -n "$mon" ]] || mon=0
   ffcast -x $mon % scrot -g %wx%h+%x+%y "$file"
}

##############################################
## Colored Find                             ##
## NOTE: Searches current tree recrusively. ##
##############################################
f() {
   find . -iregex ".*$@.*" -printf '%P\0' | xargs -r0 ls --color=auto -1d
}

################
## Smarter CD ##
################
function goto() {
   [[ -d "$1" ]] && { cd "$1"; } || cd "$(dirname "$1")";
}

####################
## Copy && Follow ##
####################
function cpf() {
   cp "$@" && goto "$_";
}

####################
## Move && Follow ##
####################
function mvf() {
   mv "$@" && goto "$_";
}

#####################
## mkdir && follow ##
#####################
function mkcdr() {
   mkdir -vp "$@" && cd "$_";
}

##################
## Start daemon ##
##################
function start() {
   sudo systemctl start $@
}

#################
## Stop daemon ##
#################
function stop() {
   sudo systemctl stop $@
}

####################
## Restart daemon ##
####################
function restart() {
   sudo systemctl restart $@
}

###################
## Enable daemon ##
###################
function enable() {
   sudo systemctl enable $@
}

####################
## Disable daemon ##
####################
function disable() {
   sudo systemctl disable $@
}

###################
## Daemon status ##
###################
function status() {
   systemctl status $@
}

########################
## Print window class ##
########################
xclass()
{
   xprop |awk '
   /^WM_CLASS/{sub(/.* =/, "instance:"); sub(/,/, "\nclass:"); print}
   /^WM_NAME/{sub(/.* =/, "title:"); print}'
}

###################################################################
## Valgrind wrapper, use valgrind.supp for suppressions if found ##
###################################################################
memleak()
{
   [[ -f valgrind.supp ]] && {
      valgrind --suppressions=valgrind.supp "$@"; } || valgrind "$@"
}

########################
## Create tar archive ##
########################
function mktar() {
   tar cvf  "${1%%/}.tar" "${1%%/}/";
}

###########################
## Create tar.gz archive ##
###########################
function mktgz() {
   tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
}

############################
## Create tar.bz2 archive ##
############################
function mktbz() {
   tar cvjf "${1%%/}.tar.bz2" "${1%%/}/";
}

#####################################################
## Remux MKV to use only 1 audio && subtible track ##
#####################################################
remux() {
   [[ -n "$1" ]] && [[ -n "$2" ]] && [[ -n "$3" ]] && [[ -n "$4" ]] || {
      echo "usage : remux [output] [input] [audio track to keep] [subtible track to keep]"
      return
   }
   mkvmerge -o "$1" -d 1 --audio-tracks "$3" --subtitle-tracks "$4" "$2"
}

#####################################################################
## Same as earlier, expect you can batch whole directory with this ##
#####################################################################
bremux() {
   local FILTER="*.mkv"
   [[ -n "$1" ]] && [[ -n "$2" ]] || {
      echo "usage : bremux [audio track] [subtible track] [filter]"
      return
   }
   [[ -n "$3" ]] && FILTER="$3"
   for i in $FILTER; do
      remux "[REMUX]$i" "$i" "$1" "$2"
   done
}

############################################################
## Print MKV info, use this to find out the track numbers ##
############################################################
mkv() {
   [[ -n "$@" ]] || {
      echo "usage : mkv [file]"
      return
   }
   mkvmerge -i "$@"
}

##################################
## Compress && Strip elf binary ##
##################################
elfcompress() {
   [[ -n "$@" ]] || {
      echo "usage : elfcompress [binary]"
      return
   }

   cp "$@" /tmp/compress.temp
   strip -s -R .comment -R .gnu.version /tmp/compress.temp

   7z a -tGZip -mx=9 /tmp/compress.gz /tmp/compress.temp
   echo 'a=/tmp/I;tail -n+2 $0|zcat>$a;chmod +x $a;$a;rm $a;exit' >> /tmp/unpack.header

   cat /tmp/unpack.header /tmp/compress.gz > "$@.packed"
   chmod +x "$@.packed"

   rm /tmp/compress.temp
   rm /tmp/compress.gz
   rm /tmp/unpack.header
}

######################################
## Open file inside git tree on vim ##
######################################
vimo() {
   local match=
   local gtdir=
   local cwd=$PWD
   git ls-files &>/dev/null || return # test if git
   gtdir="$(git rev-parse --show-toplevel )"
   [[ "$cwd" != "$gtdir" ]] && pushd "$gtdir" &> /dev/null # git root
   [[ -n "$@" ]] && { match="$(git ls-files | grep "$@")"; } ||
                      match="$(git ls-files)"
   [[ $(echo "$match" | wc -l) -gt 1 ]] && match="$(echo $match | dmenu -i -l 20 -p "vim")"
   match="$gtdir/$match" # convert to absolute
   [[ "$cwd" != "$gtdir" ]] && popd &> /dev/null # go back
   [[ -f "$match" ]] || return
   vim "$match"
}

##########################################
## Open file inside git tree on linopen ##
##########################################
openo() {
   local match=
   local gtdir=
   local cwd=$PWD
   git ls-files &>/dev/null || return # test if git
   gtdir="$(git rev-parse --show-toplevel )"
   [[ "$cwd" != "$gtdir" ]] && pushd "$gtdir" &> /dev/null # git root
   [[ -n "$@" ]] && { match="$(git ls-files | grep "$@")"; } ||
                      match="$(git ls-files)"
   [[ $(echo "$match" | wc -l) -gt 1 ]] && match="$(echo $match | dmenu -i -l 20 -p "linopen")"
   match="$gtdir/$match" # convert to absolute
   [[ "$cwd" != "$gtdir" ]] && popd &> /dev/null # go back
   [[ -f "$match" ]] || return
   open "$match"
}

#######################
## Setup github repo ##
#######################
function mkgit() {
   local GITHUB="Cloudef"
   local dir="$1"
   local gitname="$2"

   # check dir
   [[ -n "$dir" ]] || {
      echo "usage: mkgit <dir> [name]"
      return
   }

   # use dir name if, no gitname specified
   [[ -n "$gitname" ]] || gitname="$dir"
   [[ -d "$dir"     ]] || mkdir "$dir"

   # bail out, if already git repo
   [[ -d "$dir/.git" ]] && {
      echo "already a git repo: $dir"
      return
   }

   cd "$dir"
   git init || return
   touch README; git add README
   git commit -a -m 'inital setup - automated'
   git remote add origin "git@github.com:$GITHUB/$gitname.git"
   git push -u origin master
}

####################################
## Getting undefined references?  ##
## Grep your libs for symbols     ##
####################################
function greplib() {
   [[ -n "$1" ]] || {
      echo "usage : greplib [symbol] (lookup path)"
      return
   }

   if [[ -n "$2" ]]; then
      nm -a -o "$2/*.so" 2> /dev/null | grep "$1"
      nm -a -o "$2/*.a"  2> /dev/null | grep "$1"
   else
      nm -a -o "/usr/lib/*.so" 2> /dev/null | grep "$1"
      nm -a -o "/usr/lib/*.a"  2> /dev/null | grep "$1"
   fi
}

##############################
## Encode GLC captured file ##
##############################
glc-encode() {
   [[ -n "$1" ]] && [[ -n "$2" ]] && [[ -n "$3" ]] && [[ -n "$4" ]] || {
      echo "Usage : glc-encode [input] [audio bitrate] [video bitrate] [output]"
      return
   }

   [[ "$2" == "0" ]] || glc-play "$1" -o - -a 1 | ffmpeg -i pipe: -ab $2 /tmp/audio.mp4
   [[ -f /tmp/audio.mp4 ]] && {
      glc-play "$1" -o - -y 1 | ffmpeg -i pipe: -i /tmp/audio.mp4 -acodec copy -b $3 "$4"
      rm /tmp/audio.mp4
   } || {
      glc-play "$1" -o - -y 1 | ffmpeg -i pipe: -b $3 "$4"
   }
}

#############################
## Japanese text to speech ##
#############################
say() {
   local URL="$(echo "$@" | perl -MURI::Escape -ne 'chomp;print uri_escape($_)')"
   mplayer -really-quiet "http://translate.google.com/translate_tts?ie=UTF-8&tl=JA&q=$URL" &> /dev/null
}

######################################
## Crappy google translate [JA->EN] ##
######################################
translate() {
   local URL="$(echo "$@" | perl -MURI::Escape -ne 'chomp;print uri_escape($_)')"
   curl -s -A "Mozilla" "http://translate.google.com/translate_a/t?client=t&ie=UTF-8&text=$URL&sl=ja&tl=en" | awk -F'"' '{print $2}'
}

#####################################
## List unneeded header inclusions ##
##     -r argument to remove       ##
#####################################
dehdr() {
    CFLAGS="-Werror -Wfatal-errors" deheader "$@" | sed -n 's/.*: *remove *\(.*\) *from *\(.*\)/\2: \1/p'
}
