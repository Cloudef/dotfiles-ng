"
" Systemwide vimrc
" source this in your local .vimrc
"

set nocompatible " non Vi compatible

" {{{ Pathogen plugin
source /arch/vim/pathogen.vim
call pathogen#infect("/arch/vim/bundle")
call pathogen#infect()
call pathogen#helptags()
" }}}
" {{{ Misc
" system stuff
set term=xterm
if $TERM != "linux"              " if we are not in TTY
   set t_Co=256                  " set 256 colors \o/
endif

" gvim (i don't use this but whatever)
if has('gui_running')
   set guioptions-=T             " remove the toolbar
   set guioptions-=m             " remove the menubar
   set guioptions-=r             " remove the scrollbar
endif
" }}}
" {{{ Vim's own settings
colorscheme colorshot            " modified slate theme
set background=dark              " dark background
set completeopt-=preview         " disable scratch buffer
set showcmd                      " show command information
set foldmethod=marker            " allow marking folds
set showmatch                    " hilight search pattern
set incsearch                    " incremental search
set virtualedit=all              " enable virtualedit (visual block)
set autoindent                   " auto indentation
set cindent                      " C indentation
set expandtab                    " spaces not tabs
set softtabstop=3                " indents
set shiftwidth=3                 " more indents
"set softtabstop=4               " alternative tab settings
"set shiftwidth=4                " for various projects
set pastetoggle=<F12>            " toggle paste mode
set number                       " show line numbers
set noswapfile                   " no swap files
set wildmenu                     " enable wildmenu
set wildmode=list:longest,full   " wildmenu mode
set ignorecase                   " ignore case in search
set smartcase                    " if uppercase letter, don't ignore
set autoread                     " reload file if it changed
set undolevels=1000              " undo levels
set updatecount=0                " we don't use swap files
set ttyfast                      " yes we have a fast terminal connection
set lazyredraw                   " don't redraw while executing macros
set noerrorbells                 " no bells plz
set shell=zsh                    " zsh!
set showtabline=2                " show tabs always
set backspace=indent,eol,start   " backspace behaviour (indent -> eol -> start)
set cmdheight=2                  " avoid hit enter to continue
set modeline                     " use modelines
set noruler                      " use powerline instead to show stats
set laststatus=2                 " show the status always
set suffixes=.bak,~,.swp,.o,.log " lower prioritory for tab completition
set backup                       " backups are awesome
set backupdir=$HOME/.vim/backup  " set backup directory

" hilight under cursor
set cursorline                   " enable hilight
hi cursorline   cterm=NONE ctermbg=234
hi cursorcolumn cterm=NONE ctermbg=234

" this stuff is common sense
filetype on
filetype plugin on
filetype plugin indent on
syntax on

" file encoding order
set fileencodings=ucs-bom,utf-8,sjis,default

" vim history file
set viminfo=%100,'100,/100,h,\"500,:100,n~/.viminfo
" }}}
" {{{ Mutt settings
autocmd BufNewFile,BufRead /tmp/mutt-* set filetype=mail
au FileType mail set tw=64 autoindent expandtab formatoptions=tcqn
au FileType mail set list listchars=tab:»·,trail:·
au FileType mail set comments=nb:>
au FileType mail vmap D dO[...]^[
au FileType mail silent normal /--\s*$^MO^[gg/^$^Mj
" }}}
" {{{ Plugins and their settings

" {{{ CSyntaxPlus plugin
au BufNewFile,BufRead *.{c,h} call CSyntaxPlus()
" }}}
" {{{ Powerline plugin
let g:Powerline_symbols='unicode'
" }}}
" {{{ Largefile plugin
let g:LargeFile = 10             " 10 mb file is large
" }}}
" {{{ Indent guides plugin
let g:indent_guides_auto_colors=0 " no auto colors
let g:indent_guides_start_level=2 " start level 2
let g:indent_guides_guide_size=2  " size is 2 for guide
hi IndentGuidesOdd  ctermbg=234   " odd color
hi IndentGuidesEven ctermbg=235   " even color
autocmd BufEnter * IndentGuidesEnable
" }}}
" {{{ GLSL plugin
au BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl setf glsl
" }}}
" {{{ YouCompleteMe
let g:ycm_confirm_extra_conf = 0 " don't ask for confirmation
" }}}

" }}}
" {{{ Keybindings
" C-e = cycle tabs, similar to C-w for panes
nmap <C-e> :tabNext<CR>
imap <C-e> <Esc><C-e>a

" C-c = copy to XA_CLIPBOARD using loliclip
vmap <C-c> :<Esc>`>a<CR><Esc>mx`<i<CR><Esc>my'xk$v'y!tee >(loliclip -ci)<CR>u

" toggle folds with space
nnoremap <space> za

" {{{ Dmenu functions
function! Chomp(str)
   return substitute(a:str, '\n$', '', '')
endfunction

function! DmenuOpen(cmd)
   let gtdir = Chomp(system("git rev-parse --show-toplevel 2>/dev/null"))
   if (empty(gtdir))
      return
   endif
   let fname = Chomp(system("pushd ".gtdir." &>/dev/null; git ls-files 2>/dev/null | dmenu -i -l 20 -p ".a:cmd."; popd &>/dev/null"))
   let match = gtdir."/".fname
   echo match
   if empty(fname)
      return
   endif
   execute a:cmd." ".match
endfunction
" }}}
" use ctrl-t to open file in a new tab
" use ctrl-f to open file in current buffer
map <c-t> :call DmenuOpen("tabe")<cr>
map <c-f> :call DmenuOpen("edit")<cr>
map <c-g> :call DmenuOpen("split")<cr>
 " }}}
" {{{ Aliases
" {{{ Tab change functions
function SetTab(var1)
   let level=a:var1
   execute "set softtabstop=".level
   execute "set shiftwidth=".level
   :IndentGuidesToggle
   :IndentGuidesToggle
endfunction
" }}}
" change tab settings
nnoremap <silent> :8t :call SetTab(8)<CR>
nnoremap <silent> :4t :call SetTab(4)<CR>
nnoremap <silent> :3t :call SetTab(3)<CR>
nnoremap <silent> :2t :call SetTab(2)<CR>

" shortcut to YcmDiag (warnings && errors)
nnoremap <silent> :errors :YcmDiag<CR>

" strip non ascii characters from file
nnoremap <silent> :strip :%s/[<C-V>128-<C-V>255<C-V>01-<C-V>31]//g<CR>

"{{{ Modeline append function
" use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
   let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
            \ &tabstop, &shiftwidth, &textwidth)
   let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
   call append(line("$"), "")
   call append(line("$"), l:modeline)
endfunction
" }}}
" append modeline after last line in buffer.
nnoremap <silent> :ml :call AppendModeline()<CR>
" }}}

"
" some really useful autostart stuff below
"
" {{{ Keep folds closed on insert mode
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif
" }}}
" {{{ Automatically cd into the directory that the file is in
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' \\/.*$^~[]#')
" }}}
" {{{ Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
" }}}
" {{{ Restore cursor position to where it was before on file open
augroup JumpCursorOnEdit
   au!
   autocmd BufReadPost *
            \ if expand("<afile>:p:h") !=? $TEMP |
            \   if line("'\"") > 1 && line("'\"") <= line("$") |
            \     let JumpCursorOnEdit_foo = line("'\"") |
            \     let b:doopenfold = 1 |
            \     if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
            \        let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
            \        let b:doopenfold = 2 |
            \     endif |
            \     exe JumpCursorOnEdit_foo |
            \   endif |
            \ endif
   " Need to postpone using "zv" until after reading the modelines.
   autocmd BufWinEnter *
            \ if exists("b:doopenfold") |
            \   exe "normal zv" |
            \   if(b:doopenfold > 1) |
            \       exe  "+".1 |
            \   endif |
            \   unlet b:doopenfold |
            \ endif
augroup END
" }}}

" vim: set ts=8 sw=3 tw=78 :
